proc dup_to_third dup rotate rotate return
proc dup_third_str str.dup rotate rotate return

proc dup_2
    swap dup_to_third
    swap dup_to_third
return

proc str.dup2
    swap dup_third_str
    swap dup_third_str
return

proc dup_second
        swap dup rotate
return

proc stk stack_dump pause return
proc drop2 drop drop return
proc stoi2 stoi swap stoi swap return
proc putsln puts newl return
proc dumpln dump newl return
proc println dup dump newl return
proc print dup dump return
proc space " " puts return
 
proc not
    if 0 else 2 end
return

proc <= > not return
proc >= < not return

proc sizeof(int) 4 return
proc sizeof(char) 1 return
proc sizeof(byte) 1 return

proc int.move
    sizeof(int) * ptr+
return

proc char.move
    sizeof(char) * ptr+
return

proc byte.move
    sizeof(byte) * ptr+
return

proc ++ 1 + return
proc -- 1 - return

proc false 0 return
proc true  1 return

# =====================================================\

# for:
#     after the first iteration, for expects idx to be
#     the last item of the stack.
# times:
#     times will leave the idx as the last item of the
#     stack.
# end:
#     idx should be the last item of the stack when it
#     is reached.

# =====================================================/

proc say puts return

proc cls "cls" system return

proc ask puts input return

proc stk.empty
    stk.len not
return

proc stk.clear
    while stk.len do
        drop
    end
return

# {x*n} int -- {x*(n-int)}
proc drop_items
    while dup 0 > do
        stk.len 1 - if
            swap drop
        end
        --
    end drop
return

# \==========================\
# \         writing          \
# \==========================\

proc mkdir
    "mkdir " swap strsum system
return

# file str -- file
proc write
    swap str.dup rotate
    "<nul set /p=" swap strsum
    "> " strsum swap strsum system
return

# file str -- file
proc append
    swap str.dup rotate
    "<nul set /p=" swap strsum
    ">> " strsum swap strsum system
return

# file str -- file
proc writeln
    swap str.dup rotate
    "echo " swap strsum
    "> " strsum swap strsum system
return

# file str -- file
proc appendln
    swap str.dup rotate
    "echo " swap strsum
    ">> " strsum swap strsum system
return

# allocation for iota's procedures
sizeof(int) malloc let.ptr __iota_ptr__

# {0} -- iota+1 
proc iota()
    __iota_ptr__ R.int ++ dup rotate swap W.int drop
return

# {0} -- iota=0
proc iota(1)
    __iota_ptr__ 0 W.int 0 swap drop
return